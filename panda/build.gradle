plugins {
    id 'org.springframework.boot' version '2.3.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
}

group = 'com.battle'
version = '1.0'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

//configurations {
//    mybatisGenerator
//}


dependencies {
//    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.2'
    //热部署
//    developmentOnly 'org.springframework.boot:spring-boot-devtools'
//    runtimeOnly 'mysql:mysql-connector-java'
//    testImplementation('org.springframework.boot:spring-boot-starter-test') {
//        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
//    }

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    //连接mysql 8.0
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.20'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-freemarker', version: '2.3.0.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.3.0.RELEASE'

    //阿里json
    compile('com.alibaba:fastjson:1.2.23')

//mybatisGenerator 自动化部署
//    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
//    mybatisGenerator 'mysql:mysql-connector-java:8.0.20'
//    mybatisGenerator 'tk.mybatis:mapper:3.3.1'


//    compile "commons-logging:commons-logging:1.2"
//    compile "commons-lang:commons-lang:2.6"
//    compile "org.apache.commons:commons-collections4:4.0"
//    compile "commons-beanutils:commons-beanutils:1.8.3"
//    compile "commons-dbcp:commons-dbcp:1.4"
//    compile "commons-pool:commons-pool:1.6"

//    compile group: 'log4j', name: 'log4j', version: '1.2.17'




}

test {
    useJUnitPlatform()
}


//def getDbProperties = {
//    def properties = new Properties()
//    file("src/main/resources/mybatis/db-mysql.properties").withInputStream { inputStream ->
//        properties.load(inputStream)
//    }
//    properties;
//}
//task mybatisGenerate {
//    def properties = getDbProperties()
//    ant.properties['targetProject'] = projectDir.path
//    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
//    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
//    ant.properties['userId'] = properties.getProperty("jdbc.user")
//    ant.properties['password'] = properties.getProperty("jdbc.pass")
//    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
//    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
//    ant.properties['modelPackage'] = properties.getProperty("package.model")
//    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
//    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
//    ant.taskdef(
//            name: 'mbgenerator',
//            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
//            classpath: configurations.mybatisGenerator.asPath
//    )
//    ant.mbgenerator(overwrite: true,
//            configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
//        propertyset {
//            propertyref(name: 'targetProject')
//            propertyref(name: 'userId')
//            propertyref(name: 'driverClass')
//            propertyref(name: 'connectionURL')
//            propertyref(name: 'password')
//            propertyref(name: 'src_main_java')
//            propertyref(name: 'src_main_resources')
//            propertyref(name: 'modelPackage')
//            propertyref(name: 'mapperPackage')
//            propertyref(name: 'sqlMapperPackage')
//        }
//    }
//
//}